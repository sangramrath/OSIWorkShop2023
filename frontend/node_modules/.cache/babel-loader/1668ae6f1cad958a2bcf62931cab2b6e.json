{"ast":null,"code":"import _slicedToArray from \"/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/components/PostsSite.jsx\";\nimport React from 'react';\nimport { Post } from './Post';\nimport { getPosts, getPostsIds } from '../service';\nimport { useRefresh } from './hooks';\nexport const PostsSite = () => {\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        posts = _React$useState2[0],\n        setPosts = _React$useState2[1];\n\n  const needsUpdate = useRefresh(getPostsIds(posts));\n  React.useEffect(() => {\n    async function fetchData() {\n      const results = await getPosts();\n      setPosts(results.items);\n    }\n\n    fetchData();\n  }, [needsUpdate]);\n\n  if (!posts) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Loading Posts...\");\n  }\n\n  return React.createElement(React.Fragment, null, posts.length === 0 ? React.createElement(React.Fragment, null, \"No Post found\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, posts.map(post => React.createElement(\"div\", {\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Post, {\n    key: post.id,\n    post: post,\n    withLink: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })))));\n};","map":{"version":3,"sources":["/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/components/PostsSite.jsx"],"names":["React","Post","getPosts","getPostsIds","useRefresh","PostsSite","useState","posts","setPosts","needsUpdate","useEffect","fetchData","results","items","length","map","post","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,YAAtC;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,0BACDL,KAAK,CAACM,QAAN,EADC;AAAA;AAAA,QACpBC,KADoB;AAAA,QACbC,QADa;;AAE3B,QAAMC,WAAW,GAAGL,UAAU,CAACD,WAAW,CAACI,KAAD,CAAZ,CAA9B;AAEAP,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,mBAAeC,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMV,QAAQ,EAA9B;AAEAM,MAAAA,QAAQ,CAACI,OAAO,CAACC,KAAT,CAAR;AACH;;AAEDF,IAAAA,SAAS;AACZ,GARD,EAQG,CAACF,WAAD,CARH;;AAUA,MAAI,CAACF,KAAL,EAAY;AACR,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACH;;AAED,SACI,0CACKA,KAAK,CAACO,MAAN,KAAiB,CAAjB,GACG,0DADH,GAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IACX;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAED,IAAI,CAACC,EAAhB;AAAoB,IAAA,IAAI,EAAED,IAA1B;AAAgC,IAAA,QAAQ,EAAE,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADH,CADL,CAJR,CADJ;AAiBH,CAnCM","sourcesContent":["import React from 'react';\nimport { Post } from './Post';\nimport { getPosts, getPostsIds } from '../service';\nimport { useRefresh } from './hooks';\n\nexport const PostsSite = () => {\n    const [posts, setPosts] = React.useState();\n    const needsUpdate = useRefresh(getPostsIds(posts));\n\n    React.useEffect(() => {\n        async function fetchData() {\n            const results = await getPosts();\n    \n            setPosts(results.items);\n        }\n\n        fetchData();\n    }, [needsUpdate]);\n\n    if (!posts) {\n        return <div>Loading Posts...</div>\n    }\n\n    return (\n        <>\n            {posts.length === 0 ? (\n                <>No Post found</>\n            ) : (\n                <div>\n                    {posts.map(post => (\n                        <div key={post.id}>\n                            <Post key={post.id} post={post} withLink={true} />\n\n                            <hr />\n                        </div>\n                    ))}\n                </div>\n            )}\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}