{"ast":null,"code":"var _jsxFileName = \"/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/components/Markdown.jsx\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { EmbeddableHotel } from './EmbeddableHotel';\nimport { CONFIG } from './../service';\nconst hotelsRegex = new RegExp(`${escapeRegExp(CONFIG.url)}\\\\/api/content\\\\/${escapeRegExp(CONFIG.appName)}\\\\/hotels/(?<id>[a-z0-9\\\\-]+)`);\nexport const Markdown = ({\n  markdown,\n  references\n}) => {\n  return React.createElement(ReactMarkdown, {\n    children: markdown,\n    components: {\n      a({\n        href,\n        children\n      }) {\n        const match = hotelsRegex.exec(href);\n\n        if (match && match.groups) {\n          const referenceId = match.groups.id;\n          const reference = references === null || references === void 0 ? void 0 : references.find(x => x.id === referenceId);\n\n          if (reference) {\n            return React.createElement(EmbeddableHotel, {\n              hotel: reference,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 20\n              },\n              __self: this\n            });\n          }\n        }\n\n        return React.createElement(\"a\", {\n          href: href,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, children);\n      }\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  });\n};\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","map":{"version":3,"sources":["/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/components/Markdown.jsx"],"names":["React","ReactMarkdown","EmbeddableHotel","CONFIG","hotelsRegex","RegExp","escapeRegExp","url","appName","Markdown","markdown","references","a","href","children","match","exec","groups","referenceId","id","reference","find","x","string","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAY,GAAEC,YAAY,CAACH,MAAM,CAACI,GAAR,CAAa,oBAAmBD,YAAY,CAACH,MAAM,CAACK,OAAR,CAAiB,+BAAvF,CAApB;AAEA,OAAO,MACPC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA8B;AACrC,SACI,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAED,QAAzB;AAAmC,IAAA,UAAU,EAAE;AAC3CE,MAAAA,CAAC,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,EAAqB;AAClB,cAAMC,KAAK,GAAGX,WAAW,CAACY,IAAZ,CAAiBH,IAAjB,CAAd;;AAEA,YAAIE,KAAK,IAAIA,KAAK,CAACE,MAAnB,EAA2B;AACvB,gBAAMC,WAAW,GAAGH,KAAK,CAACE,MAAN,CAAaE,EAAjC;AACA,gBAAMC,SAAS,GAAGT,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEU,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASD,WAA/B,CAAlB;;AAEA,cAAIE,SAAJ,EAAe;AACX,mBAAO,oBAAC,eAAD;AAAiB,cAAA,KAAK,EAAEA,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ;;AAED,eAAO;AAAG,UAAA,IAAI,EAAEP,IAAT;AAAe,UAAA,MAAM,EAAC,QAAtB;AAA+B,UAAA,GAAG,EAAC,qBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0DC,QAA1D,CAAP;AACH;;AAd0C,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAkBH,CApBM;;AAsBP,SAASR,YAAT,CAAsBiB,MAAtB,EAA8B;AAC1B,SAAOA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP,CAD0B,CAC4B;AACzD","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport { EmbeddableHotel } from './EmbeddableHotel';\nimport { CONFIG } from './../service';\n\nconst hotelsRegex = new RegExp(`${escapeRegExp(CONFIG.url)}\\\\/api/content\\\\/${escapeRegExp(CONFIG.appName)}\\\\/hotels/(?<id>[a-z0-9\\\\-]+)`);\n\nexport const \nMarkdown = ({ markdown, references }) => {\n    return (\n        <ReactMarkdown children={markdown} components={{\n            a({ href, children }) {\n                const match = hotelsRegex.exec(href);\n\n                if (match && match.groups) {\n                    const referenceId = match.groups.id;\n                    const reference = references?.find(x => x.id === referenceId);\n\n                    if (reference) {\n                        return <EmbeddableHotel hotel={reference} />;\n                    }\n                } \n                \n                return <a href={href} target='_blank' rel='noopener noreferrer'>{children}</a>;\n            }\n        }} />\n    )\n};\n\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}"]},"metadata":{},"sourceType":"module"}