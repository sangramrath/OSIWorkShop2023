{"ast":null,"code":"import _slicedToArray from \"/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _window$location$sear;\n\nimport React from 'react';\nimport { buildSubscriptionClient } from '../service';\n\nclass Subscription {\n  constructor(elementIds, action) {\n    this.elementIds = elementIds;\n    this.elementUpdater = action;\n  }\n\n  refresh(id) {\n    if (this.elementIds.indexOf(id) >= 0) {\n      this.elementUpdater();\n      console.log('Data has been reloaded');\n    }\n  }\n\n}\n\nconst ACTIVE = ((_window$location$sear = window.location.search) === null || _window$location$sear === void 0 ? void 0 : _window$location$sear.indexOf('preview=1')) >= 0;\n\nclass RefreshListener {\n  constructor(isActive) {\n    this.subscriptions = [];\n\n    if (isActive) {\n      this.init();\n    }\n  }\n\n  add(subscription) {\n    this.subscriptions.push(subscription);\n  }\n\n  remove(subscription) {\n    this.subscriptions.splice(this.subscriptions.indexOf(subscription), 1);\n  }\n\n  async init() {\n    const client = await buildSubscriptionClient();\n    client.subscribe({\n      query: `subscription {\n                    contentChanges {\n                        id\n                    }\n                }`\n    }, {\n      next: event => {\n        const id = event.data.contentChanges.id;\n\n        for (const subscription of this.subscriptions) {\n          subscription.refresh(id);\n        }\n      },\n      error: error => {\n        console.log(`GRAPHQL error ${error}`);\n      }\n    });\n  }\n\n}\n\nRefreshListener.INSTANCE = new RefreshListener(ACTIVE);\nexport function useRefresh(ids) {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        updateIds = _React$useState2[0],\n        setUpdateIds = _React$useState2[1];\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        updateNeeded = _React$useState4[0],\n        setUpdateNeeded = _React$useState4[1];\n\n  React.useEffect(() => {\n    setUpdateIds(previous => {\n      if (isSame(previous, ids)) {\n        return previous;\n      } else {\n        return ids;\n      }\n    });\n  }, [ids]);\n  React.useEffect(() => {\n    if (!updateIds || updateIds.length === 0 || !updateIds[0]) {\n      return;\n    }\n\n    const subscription = new Subscription(updateIds, () => {\n      setUpdateNeeded(x => x + 1);\n    });\n    RefreshListener.INSTANCE.add(subscription);\n    return () => {\n      RefreshListener.INSTANCE.remove(subscription);\n    };\n  }, [updateIds]);\n  return updateNeeded;\n}\n\nfunction isSame(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/components/hooks.js"],"names":["React","buildSubscriptionClient","Subscription","constructor","elementIds","action","elementUpdater","refresh","id","indexOf","console","log","ACTIVE","window","location","search","RefreshListener","isActive","subscriptions","init","add","subscription","push","remove","splice","client","subscribe","query","next","event","data","contentChanges","error","INSTANCE","useRefresh","ids","useState","updateIds","setUpdateIds","updateNeeded","setUpdateNeeded","useEffect","previous","isSame","length","x","a","b","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { buildSubscriptionClient } from '../service';\n\nclass Subscription {\n    elementIds;\n    elementUpdater;\n\n    constructor(elementIds, action) {\n        this.elementIds = elementIds;\n        this.elementUpdater = action;\n    }\n\n    refresh(id) {\n        if (this.elementIds.indexOf(id) >= 0) {\n            this.elementUpdater();\n            console.log('Data has been reloaded');\n        }\n    }\n}\n\nconst ACTIVE = window.location.search?.indexOf('preview=1') >= 0;\n\nclass RefreshListener {\n    subscriptions = [];\n\n    static INSTANCE = new RefreshListener(ACTIVE);\n\n    constructor(isActive) {\n        if (isActive) {\n            this.init();\n        }\n    }\n\n    add(subscription) {\n        this.subscriptions.push(subscription);\n    }\n\n    remove(subscription) {\n        this.subscriptions.splice(this.subscriptions.indexOf(subscription), 1);\n    }\n\n    async init() {\n        const client = await buildSubscriptionClient();\n\n        client.subscribe({\n            query:\n                `subscription {\n                    contentChanges {\n                        id\n                    }\n                }`,\n        }, {\n            next: event => {\n                const id = event.data.contentChanges.id;\n\n                for (const subscription of this.subscriptions) {\n                    subscription.refresh(id);\n                }\n            },\n            error: error => {\n                console.log(`GRAPHQL error ${error}`);\n            }\n        })\n    }\n}\n\nexport function useRefresh(ids) {\n    const [updateIds, setUpdateIds] = React.useState([]);\n    const [updateNeeded, setUpdateNeeded] = React.useState(0);\n\n    React.useEffect(() => {\n        setUpdateIds(previous => {\n            if (isSame(previous, ids)) {\n                return previous;\n            } else {\n                return ids;\n            }\n        });\n    }, [ids]);\n\n    React.useEffect(() => {\n        if (!updateIds || updateIds.length === 0 || !updateIds[0]) {\n            return;\n        }\n\n        const subscription = new Subscription(updateIds, () => {\n            setUpdateNeeded(x => x + 1);\n        });\n\n        RefreshListener.INSTANCE.add(subscription);\n\n        return () => {\n            RefreshListener.INSTANCE.remove(subscription);\n        };\n    }, [updateIds]);\n\n    return updateNeeded;\n}\n\nfunction isSame(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n\n    if (!a || !b) {\n        return false;\n    }\n\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0 ; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"]},"metadata":{},"sourceType":"module"}