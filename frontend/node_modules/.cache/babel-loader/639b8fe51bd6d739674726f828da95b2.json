{"ast":null,"code":"import { createClient } from \"graphql-ws\";\nconst DEV = true;\nexport const CONFIG = !DEV ? {\n  url: 'http://localhost:5000',\n  appName: 'demo-hotel',\n  clientId: 'demo-hotel:default',\n  clientSecret: 'xttxlnqin0qbsasprmzknzthrtayygd6x3rsiyxczhgx'\n} : {\n  url: 'http://localhost:5000',\n  appName: 'demo-hotel',\n  clientId: 'demo-hotel:default',\n  clientSecret: 'xttxlnqin0qbsasprmzknzthrtayygd6x3rsiyxczhgx'\n};\n\nfunction getBearerToken() {\n  return localStorage.getItem('token');\n}\n\nfunction setBearerToken(token) {\n  localStorage.setItem('token', token);\n}\n\nfunction clearBearerToken() {\n  localStorage.removeItem('token');\n}\n\nconst HOTEL_FIELDS = `\n    id,\n    flatData {\n        name,\n        description,\n        minPrice,\n        rooms,\n        photos {\n            id,\n            fileName\n        }\n    }`;\nconst POST_FIELDS = `\n    id\n    flatData {\n        title\n        text {\n            text\n            contents {\n                ...on Hotels {\n                    ${HOTEL_FIELDS}\n                }\n            }\n        }\n    }`;\nexport async function buildSubscriptionClient() {\n  const token = await getBearerToken();\n  const url = buildUrl(`api/content/${CONFIG.appName}/graphql?access_token=${token}`).replace('http://', 'ws://').replace('https://', 'wss://');\n  return createClient({\n    url\n  });\n}\nexport async function getPost(id) {\n  const query = `\n        {\n            findPostsContent(id: \"${id}\") {\n                ${POST_FIELDS}\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.findPostsContent;\n}\nexport async function getHotel(id) {\n  const query = `\n        {\n            findHotelsContent(id: \"${id}\") {\n                ${HOTEL_FIELDS}\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.findHotelsContent;\n}\nexport async function getPage(slug) {\n  const query = `\n        {\n            queryPagesContents(filter: \"data/slug/iv eq '${slug}'\") {\n                ${POST_FIELDS}\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.queryPagesContents[0];\n}\nexport async function getPosts() {\n  const query = `\n        {\n            queryPostsContentsWithTotal {\n                total\n                items {\n                    ${POST_FIELDS}\n                }\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.queryPostsContentsWithTotal;\n}\nexport async function getPages() {\n  const query = `\n        {\n            queryPagesContentsWithTotal {\n                total\n                items {\n                    ${POST_FIELDS}\n                }\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.queryPagesContentsWithTotal;\n}\nexport async function getHotels() {\n  const query = `\n        {\n            queryHotelsContentsWithTotal {\n                total, \n                items {\n                    ${HOTEL_FIELDS}\n                }\n            }\n        }`;\n  const json = await getContent(`api/content/${CONFIG.appName}/graphql`, {\n    query\n  });\n  return json.data.queryHotelsContentsWithTotal;\n}\nexport async function fetchBearerToken() {\n  // Check if we have already a bearer token in local store.\n  let token = getBearerToken();\n\n  if (token) {\n    return token;\n  }\n\n  const body = `grant_type=client_credentials&scope=squidex-api&client_id=${CONFIG.clientId}&client_secret=${CONFIG.clientSecret}`; // Get the bearer token. Ensure that we use a client id with readonly permissions.\n\n  const response = await fetch(buildUrl('identity-server/connect/token'), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to retrieve token, got ${response.statusText}`);\n  }\n\n  const json = await response.json();\n  token = json.access_token; // Cache the bearer token in the local store.\n\n  setBearerToken(token);\n  return token;\n}\n\nfunction getContent(url, body) {\n  return getContentInternal(url, body, true);\n}\n\nasync function getContentInternal(url, body, retry) {\n  // Fetch the bearer token.\n  const token = await fetchBearerToken();\n  const response = await fetch(buildUrl(url), {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (!response.ok) {\n    if (response.status === 403 || response.status === 401) {\n      // If we get an error we clear the bearer token and retry the request.\n      clearBearerToken();\n\n      if (retry) {\n        return getContentInternal(url);\n      }\n    }\n\n    throw new Error(`Failed to retrieve content, got ${response.statusText}`);\n  }\n\n  return await response.json();\n}\n\nfunction buildUrl(url) {\n  if (url.length > 0 && url.startsWith('/')) {\n    url = url.substr(1);\n  }\n\n  const result = `${CONFIG.url}/${url}`;\n  return result;\n}\n\nexport function getPostsIds(posts) {\n  const result = [];\n\n  if (posts) {\n    for (const post of posts) {\n      if (post) {\n        result.push(post.id);\n      }\n\n      if (post.flatData.text.contents) {\n        for (const content of post.flatData.text.contents) {\n          result.push(content.id);\n        }\n      }\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/sangram/Documents/OSI/testlab/squidex-samples/jscript/react/sample-hotels/src/service/index.js"],"names":["createClient","DEV","CONFIG","url","appName","clientId","clientSecret","getBearerToken","localStorage","getItem","setBearerToken","token","setItem","clearBearerToken","removeItem","HOTEL_FIELDS","POST_FIELDS","buildSubscriptionClient","buildUrl","replace","getPost","id","query","json","getContent","data","findPostsContent","getHotel","findHotelsContent","getPage","slug","queryPagesContents","getPosts","queryPostsContentsWithTotal","getPages","queryPagesContentsWithTotal","getHotels","queryHotelsContentsWithTotal","fetchBearerToken","body","response","fetch","method","headers","ok","Error","statusText","access_token","getContentInternal","retry","JSON","stringify","status","length","startsWith","substr","result","getPostsIds","posts","post","push","flatData","text","contents","content"],"mappings":"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","sourcesContent":["import { createClient } from \"graphql-ws\";\n\nconst DEV = true;\n\nexport const CONFIG = !DEV ? {\n    url: 'http://localhost:5000',\n    appName: 'demo-hotel',\n    clientId: 'demo-hotel:default',\n    clientSecret: 'xttxlnqin0qbsasprmzknzthrtayygd6x3rsiyxczhgx'\n} : {\n    url:  'http://localhost:5000',\n    appName: 'demo-hotel',\n    clientId: 'demo-hotel:default',\n    clientSecret: 'xttxlnqin0qbsasprmzknzthrtayygd6x3rsiyxczhgx'\n};\n\nfunction getBearerToken() {\n    return localStorage.getItem('token');\n}\n\nfunction setBearerToken(token) {\n    localStorage.setItem('token', token);\n}\n\nfunction clearBearerToken() {\n    localStorage.removeItem('token');\n}\n\nconst HOTEL_FIELDS = `\n    id,\n    flatData {\n        name,\n        description,\n        minPrice,\n        rooms,\n        photos {\n            id,\n            fileName\n        }\n    }`;\n\nconst POST_FIELDS = `\n    id\n    flatData {\n        title\n        text {\n            text\n            contents {\n                ...on Hotels {\n                    ${HOTEL_FIELDS}\n                }\n            }\n        }\n    }`\n\nexport async function buildSubscriptionClient() {\n    const token = await getBearerToken();\n\n    const url =\n        buildUrl(`api/content/${CONFIG.appName}/graphql?access_token=${token}`)\n            .replace('http://', 'ws://')\n            .replace('https://', 'wss://');\n\n    return createClient({\n        url\n    });\n}\n\nexport async function getPost(id) {\n    const query = `\n        {\n            findPostsContent(id: \"${id}\") {\n                ${POST_FIELDS}\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.findPostsContent;\n}\n\nexport async function getHotel(id) {\n    const query = `\n        {\n            findHotelsContent(id: \"${id}\") {\n                ${HOTEL_FIELDS}\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.findHotelsContent;\n}\n\nexport async function getPage(slug) {\n    const query = `\n        {\n            queryPagesContents(filter: \"data/slug/iv eq '${slug}'\") {\n                ${POST_FIELDS}\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.queryPagesContents[0];\n}\n\nexport async function getPosts() {\n    const query = `\n        {\n            queryPostsContentsWithTotal {\n                total\n                items {\n                    ${POST_FIELDS}\n                }\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.queryPostsContentsWithTotal;\n}\n\nexport async function getPages() {\n    const query = `\n        {\n            queryPagesContentsWithTotal {\n                total\n                items {\n                    ${POST_FIELDS}\n                }\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.queryPagesContentsWithTotal;\n}\n\nexport async function getHotels() {\n    const query = `\n        {\n            queryHotelsContentsWithTotal {\n                total, \n                items {\n                    ${HOTEL_FIELDS}\n                }\n            }\n        }`;\n\n    const json = await getContent(`api/content/${CONFIG.appName}/graphql`, { query });\n\n    return json.data.queryHotelsContentsWithTotal;\n}\n\nexport async function fetchBearerToken() {\n    // Check if we have already a bearer token in local store.\n    let token = getBearerToken();\n\n    if (token) {\n        return token;\n    }\n\n    const body = `grant_type=client_credentials&scope=squidex-api&client_id=${CONFIG.clientId}&client_secret=${CONFIG.clientSecret}`;\n\n    // Get the bearer token. Ensure that we use a client id with readonly permissions.\n    const response = await fetch(buildUrl('identity-server/connect/token'), { \n        method: 'POST', \n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body \n    });\n\n    if (!response.ok) {\n        throw new Error(`Failed to retrieve token, got ${response.statusText}`);\n    }\n\n    const json = await response.json();\n\n    token = json.access_token;\n\n    // Cache the bearer token in the local store.\n    setBearerToken(token);\n\n    return token;\n}\n\nfunction getContent(url, body) {\n    return getContentInternal(url, body, true);\n}\n\nasync function getContentInternal(url, body, retry) {\n    // Fetch the bearer token.\n    const token = await fetchBearerToken();\n\n    const response = await fetch(buildUrl(url), {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });     \n\n    if (!response.ok) {\n        if (response.status === 403 || response.status === 401) {\n            // If we get an error we clear the bearer token and retry the request.\n            clearBearerToken();\n\n            if (retry) {\n                return getContentInternal(url);\n            }\n        }\n\n        throw new Error(`Failed to retrieve content, got ${response.statusText}`);\n    }\n\n    return await response.json();\n}\n\nfunction buildUrl(url) {\n    if (url.length > 0 && url.startsWith('/')) {\n        url = url.substr(1);\n    }\n\n    const result = `${CONFIG.url}/${url}`;\n\n    return result;\n}\n\nexport function getPostsIds(posts) {\n    const result = [];\n\n    if (posts) {\n        for (const post of posts) {\n            if (post) {\n                result.push(post.id);\n            }\n\n            if (post.flatData.text.contents) {\n                for (const content of post.flatData.text.contents) {\n                    result.push(content.id);\n                }\n            }\n        }\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}